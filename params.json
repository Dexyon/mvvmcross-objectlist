{"name":"Mvvmcross-objectlist","tagline":"A sample 'Proof of Concept' project to create a object to list binding for MvvmCross","body":"mvvmcross-objectlist\r\n====================\r\n\r\nA simple proxy library, which converts an object into a list of key-values.\r\n\r\n## Howto use\r\n\r\nThere are two ways to use the ObjectList. \r\n* Create a specific model which contains the properties needed in the UI.\r\n* Update a specific ViewModel with Attributes (which can optionally also be added in the specific model).\r\n\r\n### Create A proxyModel with a specific model \r\n\r\n```\r\npublic ExampleOverviewViewModel () {\r\n\t_currentPerson = new Person ()\r\n\t{ \r\n\t\tFullName = \"Jelle Damen\",\r\n\t\tBirthDate = new System.DateTime(1987,2,10),\r\n\t\tBirthPlace = \"Hoofddorp\",\r\n\t\t//HasChildren = false,\r\n\t\tSalary = 450.00\r\n\t};\r\n\r\n\tCurrentPerson = \r\n\t\tnew ProxyModel<Person, ExampleOverviewViewModel>(\r\n\t\t\t_currentPerson, \r\n\t\t\tthis,\r\n\t\t\t() => RaisePropertyChanged ( () => CurrentPerson ));\r\n}\r\n\r\nprivate Person _currentPerson;\r\n\r\npublic ProxyModel<Person, ExampleOverviewViewModel> CurrentPerson\r\n{ \r\n\tget; \r\n\tset; \r\n}\r\n```\r\n\r\n```\r\npublic class Person {\r\n\r\n\t[ProxyModelAttribute(Description = \"Full Name:\", Order = 1 )]\r\n\t[MvxLang(Text=\"FullName\", TextSource=\"TextSource\")]\r\n\tpublic string FullName { get; set; }\r\n\r\n\t[ProxyModelAttribute(Description = \"Birth Place:\", Order = 3 )]\r\n\t[MvxLang(Text=\"BirthPlace\", TextSource=\"TextSource\")]\r\n\tpublic string BirthPlace { get; set; }\r\n\r\n\t[ProxyModelAttribute(Description = \"Date of Birth:\", Order = 4 )]\r\n\t[MvxLang(Text=\"BirthDate\", TextSource=\"TextSource\")]\r\n\tpublic DateTime BirthDate {get;set;}\r\n\r\n\t//public bool HasChildren { get; set;}\r\n\r\n\t[ProxyModelAttribute(Description = \"Age:\", Order = 2 )]\r\n\t[MvxLang(Text=\"Age\", TextSource=\"TextSource\")]\r\n\tpublic int Age\r\n\t{\r\n\t\tget{ \r\n\t\t\treturn (int)((DateTime.Now - BirthDate).TotalDays / 365);\r\n\t\t}\r\n\t}\r\n\r\n\t[ProxyModelAttribute(Description = \"Salary: \")]\r\n\t[MvxLang(Text=\"Salary\", TextSource=\"TextSource\")]\r\n\tpublic double Salary { get; set; }\r\n\r\n}\r\n```\r\n\r\n### Create A proxyModel based upon the existing ViewModel\r\n```\r\n/// <summary>\r\n/// Initializes a new instance of the\r\n/// <see cref=\"Dexyon.MvvmCrossObjectList.Core.ViewModels.ExampleOverviewViewModel\"/> class.\r\n/// </summary>\r\npublic SecondExampleOverviewViewModel () {\r\n\tFullName = \"Dexyon\";\r\n\tBirthDate = new System.DateTime ( 1984, 11, 27 );\r\n\tBirthPlace = \"Bergen\";\r\n\tSalary = 100.00;\r\n\r\n\tCurrentPerson = new ProxyModel<SecondExampleOverviewViewModel> (\r\n\t\tthis,\r\n\t\t() => RaisePropertyChanged ( () => CurrentPerson ) \r\n\t);\r\n}\r\n\r\nprivate string _fullName;\r\nprivate string _birthPlace;\r\nprivate DateTime _birthDate;\r\nprivate double _salary;\r\n\r\n[ProxyModelAttribute ( Description = \"Full Name:\", Order = 1 )]\r\n[MvxLang ( Text = \"FullName\", TextSource = \"TextSource\" )]\r\npublic string FullName { \r\n\tget { return _fullName; } \r\n\tset { this.SetAndRaisePropertyChanged ( () => FullName, ref _fullName, value ); } \r\n}\r\n\r\n[ProxyModelAttribute ( Description = \"Birth Place:\", Order = 3 )]\r\n[MvxLang ( Text = \"BirthPlace\", TextSource = \"TextSource\" )]\r\npublic string BirthPlace { \r\n\tget { return _birthPlace; } \r\n\tset { this.SetAndRaisePropertyChanged ( () => BirthPlace, ref _birthPlace, value ); } \r\n}\r\n\r\n[ProxyModelAttribute ( Description = \"Date of Birth:\", Order = 4 )]\r\n[MvxLang ( Text = \"BirthDate\", TextSource = \"TextSource\" )]\r\npublic DateTime BirthDate { \r\n\tget { return _birthDate; } \r\n\tset { this.SetAndRaisePropertyChanged ( () => BirthDate, ref _birthDate, value ); } \r\n}\r\n\r\n//public bool HasChildren { get; set;}\r\n\r\n[ProxyModelAttribute ( Description = \"Age:\", Order = 2 )]\r\n[MvxLang ( Text = \"Age\", TextSource = \"TextSource\" )]\r\npublic int Age {\r\n\tget { \r\n\t\treturn (int)((DateTime.Now - BirthDate).TotalDays / 365);\r\n\t}\r\n}\r\n\r\n[ProxyModelAttribute ( Description = \"Salary: \" )]\r\n[MvxLang ( Text = \"Salary\", TextSource = \"TextSource\" )]\r\npublic double Salary { \r\n\tget { return _salary; } \r\n\tset { this.SetAndRaisePropertyChanged ( () => Salary, ref _salary, value ); }  \r\n}\r\n\r\npublic ProxyModel<SecondExampleOverviewViewModel> CurrentPerson { \r\n\tget; \r\n\tset; \r\n}\r\n``` \r\n\r\n## Version 3.5\r\n- Upgraded the version number to match MvvmCross plugins\r\n- Upgraded to the latest version\r\n- Upgraded the iOS parts to Unified API.\r\n\r\n## Version 0.2\r\n- Made the default dell in iOS a default value. Overrides can be done via the constructor.\r\n- Added a default listitem to the Droid Project. Overrides can be done via the constructor.\r\n \r\n## Version 0.1\r\n- Added the first demo project for Touch and Droid\r\n- Added the set-up for the project\r\n\r\n\r\nTodo Items. \r\n\r\n- 1) Make use of Native converters to map properties back and forward from \r\n     our (original) viewModel to a 'Value' on our ListViewItemViewModel.\r\n- 2) Update the UI (LIstView) after a value has changed our (original) viewmodel. \r\n- 3) Add methods to pass multiple ValueConverters to our BindableListView based upon PropertyName. \r\n     Example code:\r\n     \tthis.CreateBinding(source)\r\n\t\t\t.To<ExampleOverviewViewModel>(vm => vm.ExampleViewModel)\r\n\t\t\t.WithConversion ( \r\n\t\t\t\tKeyValue<string,MvxConverter> ( \"ExampleProperty\", new ExampleConverter() ),\r\n\t\t\t\tKeyValue<string,MvxConverter> ( \"AnotherPropery\", new AnotherConverter() ) \r\n\t\t\t)\r\n\t\t\t.Apply();\r\n- 4) Create a mapping to pass our converters via axml. \r\n \r\n","google":"UA-2486374-4","note":"Don't delete this file! It's used internally to help with page regeneration."}